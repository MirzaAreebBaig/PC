[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-02 09:34:57.879599",
  "module": "Pharma Compliance",
  "name": "Document Datetime Recording",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "SOP",
  "script": "# Server Script - Before Save event for Document doctype\r\nif not doc.is_new():\r\n    old_doc = frappe.get_doc(\"SOP\", doc.name)\r\n    \r\n    if old_doc.status != doc.status:\r\n        current_datetime = frappe.utils.now_datetime()\r\n        \r\n        if doc.status == \"Under Approval\":\r\n            doc.reviewed_datetime = current_datetime\r\n            \r\n        elif doc.status == \"Effective\":\r\n            doc.approved_datetime = current_datetime",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-04 12:38:29.784279",
  "module": "Pharma Compliance",
  "name": "Permission For Document",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "SOP",
  "script": "# Permission Query for Document DocType\r\n# Role-based visibility: Document Creator, Reviewer, Approver\r\n# Get the current user's email\r\ncurrent_user_email = frappe.db.get_value('User', frappe.session.user, 'email')\r\n# Get the current user document\r\nuser = frappe.get_doc('User', frappe.session.user)\r\n# Check if the user is Administrator\r\nis_administrator = frappe.session.user == 'Administrator'\r\n# Check if the user has privileged roles (can see all documents)\r\nis_system_manager = any(role.role == 'System Manager' for role in user.roles)\r\n# Check specific document workflow roles\r\nis_document_creator = any(role.role == 'Document Creator' for role in user.roles)\r\nis_reviewer = any(role.role == 'Reviewer' for role in user.roles)\r\nis_approver = any(role.role == 'Approver' for role in user.roles)\r\n\r\n# If Administrator or System Manager, no conditions (see all records)\r\nif is_administrator or is_system_manager:\r\n    conditions = \"\"\r\nelif is_document_creator or is_reviewer or is_approver:\r\n    # Build conditions based on user roles and status\r\n    role_conditions = []\r\n    \r\n    if is_document_creator:\r\n        role_conditions.append(f\"prepared_by = '{current_user_email}'\")\r\n    \r\n    if is_reviewer:\r\n        # Reviewer can see documents they are assigned to review when status is \"Under Review\"\r\n        # OR documents in \"Effective\" or \"Obsolete\" status if they are the reviewer\r\n        role_conditions.append(f\"(reviewed_by = '{current_user_email}' AND (status = 'Under Review' OR status = 'Effective' OR status = 'Obsolete'))\")\r\n    \r\n    if is_approver:\r\n        # Approver can see documents they are assigned to approve when status is \"Under Approval\"\r\n        # OR documents in \"Effective\" or \"Obsolete\" status if they are the approver\r\n        role_conditions.append(f\"(approved_by = '{current_user_email}' AND (status = 'Under Approval' OR status = 'Effective' OR status = 'Obsolete'))\")\r\n    \r\n    # Add condition for shared documents\r\n    role_conditions.append(f\"name IN (SELECT share_name FROM `tabDocShare` WHERE user = '{current_user_email}' AND share_doctype = 'SOP')\")\r\n    \r\n    # Combine conditions with OR logic\r\n    conditions = f\"({' OR '.join(role_conditions)})\"\r\nelse:\r\n    # For other users, only show shared documents\r\n    conditions = f\"name IN (SELECT share_name FROM `tabDocShare` WHERE user = '{current_user_email}' AND share_doctype = 'SOP')\"",
  "script_type": "Permission Query"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-03 15:25:06.644803",
  "module": "Pharma Compliance",
  "name": "SOP Version Number Check",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "SOP",
  "script": "if doc.document_no and doc.company:\n    existing_count = frappe.db.count('SOP', {\n        'document_no': doc.document_no,\n        'company': doc.company\n    })\n    doc.version_number = f\"{existing_count:02d}\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-04 10:31:16.083507",
  "module": "Pharma Compliance",
  "name": "SOP Auto Obsolete",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "SOP",
  "script": "# Server Script for SOP DocType\n# Event: After Save\n\n# Check if status is \"Effective\" and supersedes field has value\nif doc.status == \"Effective\" and doc.supersedes:\n    try:\n        # Get the superseded SOP document\n        superseded_sop = frappe.get_doc(\"SOP\", doc.supersedes)\n        \n        # Only update if not already obsolete\n        if superseded_sop.status != \"Obsolete\":\n            # Update the superseded SOP\n            superseded_sop.status = \"Obsolete\"\n            superseded_sop.workflow_state = \"Obsolete\"\n            \n            # Save with system permissions\n            superseded_sop.flags.ignore_permissions = True\n            superseded_sop.flags.ignore_validate = True\n            superseded_sop.save()\n            \n            # Show success message\n            frappe.msgprint(\"SOP \" + doc.supersedes + \" has been automatically set to Obsolete\", alert=True)\n            \n    except Exception as e:\n        # Log error without blocking the main document save\n        frappe.log_error(\"Error updating superseded SOP: \" + str(e), \"SOP Status Update Error\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-07-04 14:22:08.947905",
  "module": "Pharma Compliance",
  "name": "SOP Permission",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "SOP",
  "script": "# Server Script to block direct URL access\r\n# Script Type: API\r\n# Method: frappe.has_permission\r\n\r\ndef has_permission(doc, ptype, user):\r\n    \"\"\"\r\n    Custom permission check for Document DocType\r\n    This will be called for every document access\r\n    \"\"\"\r\n    if not doc:\r\n        return False\r\n    \r\n    # Get the current user's email\r\n    current_user_email = frappe.db.get_value('User', user, 'email')\r\n    \r\n    # Get the current user document\r\n    user_doc = frappe.get_doc('User', user)\r\n    \r\n    # Check if the user is Administrator\r\n    is_administrator = user == 'Administrator'\r\n    \r\n    # Check if the user has privileged roles (can see all documents)\r\n    is_system_manager = any(role.role == 'System Manager' for role in user_doc.roles)\r\n    \r\n    # Check specific document workflow roles\r\n    is_document_creator = any(role.role == 'Document Creator' for role in user_doc.roles)\r\n    is_reviewer = any(role.role == 'Reviewer' for role in user_doc.roles)\r\n    is_approver = any(role.role == 'Approver' for role in user_doc.roles)\r\n    \r\n    # If Administrator or System Manager, allow access\r\n    if is_administrator or is_system_manager:\r\n        return True\r\n    \r\n    # Check permissions for other users\r\n    has_permission = False\r\n    \r\n    if is_document_creator or is_reviewer or is_approver:\r\n        if is_document_creator and doc.prepared_by == current_user_email:\r\n            has_permission = True\r\n        \r\n        if is_reviewer and doc.reviewed_by == current_user_email:\r\n            if doc.status in ['Under Review', 'Effective', 'Obsolete']:\r\n                has_permission = True\r\n        \r\n        if is_approver and doc.approved_by == current_user_email:\r\n            if doc.status in ['Under Approval', 'Effective', 'Obsolete']:\r\n                has_permission = True\r\n    \r\n    # Check if document is shared with the user (for all users)\r\n    if not has_permission:\r\n        shared_docs = frappe.db.get_all('DocShare', \r\n            filters={\r\n                'user': current_user_email,\r\n                'share_doctype': 'Document',  # Change this to your actual DocType name\r\n                'share_name': doc.name\r\n            }\r\n        )\r\n        if shared_docs:\r\n            has_permission = True\r\n    \r\n    return has_permission",
  "script_type": "DocType Event"
 }
]