[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SOP",
  "enabled": 1,
  "modified": "2025-07-02 09:39:28.075399",
  "module": "Pharma Compliance",
  "name": "Document User Filters",
  "script": "frappe.ui.form.on('SOP', {\r\n    onload: function(frm) {\r\n        // Filter users with \"Reviewer\" role for reviewed_by field (excluding current user)\r\n        frm.set_query('reviewed_by', () => {\r\n            return {\r\n                query: \"frappe.core.doctype.user.user.user_query\",\r\n                filters: {\r\n                    role: \"Reviewer\",\r\n                    name: [\"!=\", frappe.session.user]\r\n                }\r\n            };\r\n        });\r\n        \r\n        // Filter users with \"Approver\" role for approved_by field (excluding current user)\r\n        frm.set_query('approved_by', () => {\r\n            return {\r\n                query: \"frappe.core.doctype.user.user.user_query\",\r\n                filters: {\r\n                    role: \"Approver\",\r\n                    name: [\"!=\", frappe.session.user]\r\n                }\r\n            };\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SOP",
  "enabled": 1,
  "modified": "2025-07-02 09:28:20.977539",
  "module": "Pharma Compliance",
  "name": "Document Signature Loading",
  "script": "// Client Script for Document DocType\r\n// Add this as a Client Script in your Document DocType\r\n\r\nfrappe.ui.form.on('SOP', {\r\n    // When prepared_by user is selected\r\n    prepared_by: function(frm) {\r\n        if (frm.doc.prepared_by) {\r\n            load_user_signature(frm, 'prepared_by', 'prepared_sign');\r\n        } else {\r\n            frm.set_value('prepared_sign', '');\r\n        }\r\n    },\r\n    \r\n    // When reviewed_by user is selected\r\n    reviewed_by: function(frm) {\r\n        if (frm.doc.reviewed_by) {\r\n            load_user_signature(frm, 'reviewed_by', 'reviewed_sign');\r\n        } else {\r\n            frm.set_value('reviewed_sign', '');\r\n        }\r\n    },\r\n    \r\n    // When approved_by user is selected\r\n    approved_by: function(frm) {\r\n        if (frm.doc.approved_by) {\r\n            load_user_signature(frm, 'approved_by', 'approved_sign');\r\n        } else {\r\n            frm.set_value('approved_sign', '');\r\n        }\r\n    }\r\n});\r\n\r\n// Function to load user signature from Digital Signature doctype\r\nfunction load_user_signature(frm, user_field, sign_field) {\r\n    const user = frm.doc[user_field];\r\n    \r\n    if (!user) return;\r\n    \r\n    frappe.call({\r\n        method: 'frappe.client.get_list',\r\n        args: {\r\n            doctype: 'Digital Signature',\r\n            filters: {\r\n                user: user\r\n            },\r\n            fields: ['signature'],\r\n            limit: 1\r\n        },\r\n        callback: function(response) {\r\n            if (response.message && response.message.length > 0) {\r\n                const signature_url = response.message[0].signature;\r\n                if (signature_url) {\r\n                    frm.set_value(sign_field, signature_url);\r\n                } else {\r\n                    frappe.msgprint(`No signature found for user: ${user}`);\r\n                    frm.set_value(sign_field, '');\r\n                }\r\n            } else {\r\n                frappe.msgprint(`No digital signature record found for user: ${user}`);\r\n                frm.set_value(sign_field, '');\r\n            }\r\n        },\r\n        error: function(error) {\r\n            console.error('Error loading signature:', error);\r\n            frappe.msgprint('Error loading signature. Please try again.');\r\n        }\r\n    });\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SOP",
  "enabled": 1,
  "modified": "2025-07-03 15:27:10.146455",
  "module": "Pharma Compliance",
  "name": "SOP Version Number Check",
  "script": "frappe.ui.form.on('SOP', {\r\n    document_no: function(frm) {\r\n        update_version_number(frm);\r\n    },\r\n    company: function(frm) {\r\n        update_version_number(frm);\r\n    }\r\n});\r\n\r\nfunction update_version_number(frm) {\r\n    if (frm.doc.document_no && frm.doc.company && frm.is_new()) {\r\n        frappe.call({\r\n            method: 'frappe.client.get_count',\r\n            args: {\r\n                doctype: 'SOP',\r\n                filters: {\r\n                    document_no: frm.doc.document_no,\r\n                    company: frm.doc.company\r\n                }\r\n            },\r\n            callback: function(r) {\r\n                if (r.message !== undefined) {\r\n                    let version = String(r.message).padStart(2, '0');\r\n                    frm.set_value('version_number', version);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SOP",
  "enabled": 1,
  "modified": "2025-07-03 15:15:20.693932",
  "module": null,
  "name": "SOP Naming",
  "script": "frappe.ui.form.on('SOP', {\n    document_no: function(frm) {\n        update_document_naming(frm);\n    },\n    \n    version_number: function(frm) {\n        update_document_naming(frm);\n    },\n    \n    company_shortform: function(frm) {\n        update_document_naming(frm);\n    },\n    \n    refresh: function(frm) {\n        // Load on form load if fields already have values\n        update_document_naming(frm);\n    }\n});\n\nfunction update_document_naming(frm) {\n    if (frm.doc.document_no && frm.doc.version_number && frm.doc.company_shortform) {\n        let naming = `${frm.doc.document_no}-${frm.doc.version_number}-${frm.doc.company_shortform}`;\n        frm.set_value('document_naming', naming);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SOP",
  "enabled": 1,
  "modified": "2025-07-03 18:22:20.816473",
  "module": "Pharma Compliance",
  "name": "SOP Filters For Supersedes",
  "script": "frappe.ui.form.on('SOP', {\r\n    refresh: function(frm) {\r\n        frm.set_query('supersedes', function() {\r\n            return {\r\n                filters: {\r\n                    'status': 'Effective'\r\n                }\r\n            };\r\n        });\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SOP",
  "enabled": 1,
  "modified": "2025-07-04 14:42:50.004746",
  "module": "Pharma Compliance",
  "name": "SOP Stop Editing",
  "script": "frappe.ui.form.on('SOP', {\r\n    refresh: function(frm) {\r\n        restrict_editing(frm);\r\n    },\r\n    \r\n    onload: function(frm) {\r\n        restrict_editing(frm);\r\n    }\r\n});\r\n\r\nfunction restrict_editing(frm) {\r\n    if (frm.doc.status == \"Under Review\" || frm.doc.status == \"Under Approval\") {\r\n        // Disable all fields except status and remarks-related fields\r\n        frm.fields.forEach(function(field) {\r\n            if (field.df.fieldname !== 'status' && \r\n                field.df.fieldname !== 'remark_tab' && \r\n                field.df.fieldname !== 'sop_remark') {\r\n                frm.set_df_property(field.df.fieldname, 'read_only', 1);\r\n            }\r\n        });\r\n        \r\n        // Ensure remarks tab and table are editable\r\n        frm.set_df_property('remark_tab', 'read_only', 0);\r\n        frm.set_df_property('sop_remark', 'read_only', 0);\r\n        \r\n        // Make sure the remarks tab is visible\r\n        frm.set_df_property('remark_tab', 'hidden', 0);\r\n        \r\n        // Show indicator\r\n        frm.dashboard.set_headline(__('This document is locked for editing (except remarks)'));\r\n        \r\n        // Disable save for main form but allow child table operations\r\n        frm.disable_save();\r\n        \r\n        // Enable save if there are changes to remarks\r\n        frm.fields_dict.sop_remark.grid.wrapper.on('change', function() {\r\n            frm.enable_save();\r\n        });\r\n    }\r\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "SOP",
  "enabled": 1,
  "modified": "2025-07-04 14:52:40.272130",
  "module": "Pharma Compliance",
  "name": "SOP Remark Controller",
  "script": "// SOP DocType - Client Script\nfrappe.ui.form.on('SOP', {\n    refresh: function(frm) {\n        // Hide delete button for sop_remark table\n        hide_delete_button_for_table(frm, 'sop_remark');\n        \n        // Set field permissions based on user roles\n        set_field_permissions(frm);\n    },\n    \n    onload: function(frm) {\n        // Set field permissions on load\n        set_field_permissions(frm);\n    }\n});\n\n// Child table script for SOP Remark\nfrappe.ui.form.on('SOP Remark', {\n    before_sop_remark_remove: function(frm, cdt, cdn) {\n        // Prevent deletion of rows\n        frappe.throw(__('Deletion of remarks is not allowed'));\n    }\n});\n\nfunction hide_delete_button_for_table(frm, table_fieldname) {\n    // Hide the delete button for the specific table\n    frm.fields_dict[table_fieldname].grid.wrapper.find('.grid-delete-row').hide();\n    frm.fields_dict[table_fieldname].grid.wrapper.find('.grid-remove-rows').hide();\n    \n    // Also hide delete button in each row\n    setTimeout(() => {\n        frm.fields_dict[table_fieldname].grid.wrapper.find('.grid-row-remove').hide();\n    }, 100);\n}\n\nfunction set_field_permissions(frm) {\n    const user_roles = frappe.user_roles;\n    const is_reviewer = user_roles.includes('Reviewer');\n    const is_approver = user_roles.includes('Approver');\n    const is_document_creator = user_roles.includes('Document Creator');\n    \n    // Iterate through each row in sop_remark table\n    frm.doc.sop_remark.forEach(function(row, index) {\n        const row_name = row.name;\n        \n        // Set permissions for sop_content and remark fields\n        if (is_reviewer || is_approver) {\n            // Reviewer and Approver can add/edit sop_content and remark\n            // But only if they haven't been set yet (to prevent editing once added)\n            if (row.sop_content || row.remark) {\n                frm.fields_dict.sop_remark.grid.grid_rows[index].docfields.forEach(function(field) {\n                    if (field.fieldname === 'sop_content' || field.fieldname === 'remark') {\n                        field.read_only = 1;\n                    }\n                });\n            }\n        } else {\n            // For other roles, make sop_content and remark read-only\n            frm.fields_dict.sop_remark.grid.grid_rows[index].docfields.forEach(function(field) {\n                if (field.fieldname === 'sop_content' || field.fieldname === 'remark') {\n                    field.read_only = 1;\n                }\n            });\n        }\n        \n        // Set permissions for status field\n        if (is_document_creator) {\n            // Document Creator can update status\n            frm.fields_dict.sop_remark.grid.grid_rows[index].docfields.forEach(function(field) {\n                if (field.fieldname === 'status') {\n                    field.read_only = 0;\n                }\n            });\n        } else {\n            // For other roles, make status read-only\n            frm.fields_dict.sop_remark.grid.grid_rows[index].docfields.forEach(function(field) {\n                if (field.fieldname === 'status') {\n                    field.read_only = 1;\n                }\n            });\n        }\n    });\n    \n    // Refresh the table to apply changes\n    frm.refresh_field('sop_remark');\n}",
  "view": "Form"
 }
]